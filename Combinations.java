import java.util.Arrays;
import java.util.ArrayList;

class Combinations
{	
	public static void main(String[] args) {
		// Validate the usage of the program
		if (args.length != 3) {
			System.out.println("Valid Usage: FileName.java (list) (combination of m) (displaying the data or not, 0 for no)");
			System.out.println("Valid Usage: Combinations.java 0-1-2-3-4 3 1");
			return;
		}
		
		// Store the list of inputs in a static list variable
		String[] list = args[0].split("-");
		
		int n = list.length; // The number of items in list
		int m = Integer.parseInt(args[1]); // Choosing m from n
		
		// Display the inputed info & check if m value is valid or not
		System.out.println("*******************************");
		if (m <= n) {
			System.out.println("List: " + Arrays.toString(list));
			System.out.println("n: " + n);
			System.out.println("m: " + m);
		}
		else {
			System.out.println("Invalid Input: m has to be bigger than the length of the list");
			return;
		}
		System.out.println("*******************************");
		
		// Generate combinations and evaluate the execution time
		long t1 = System.currentTimeMillis();
		ArrayList<int[]> combs_list = getCombs(n, m);
		long t2 = System.currentTimeMillis();
		System.out.println("Execution time: " + String.valueOf(t2 - t1) + " milliseconds\n");
		
		// Counter for the number of generated combinations
		int combs_num = combs_list.size();
		
		// If the user didn't state that don't display the outputs,
		// then loop over each combination (list) generated from getCombs
		if (Integer.parseInt(args[2]) != 0)
			for (int[] comb_list : combs_list)
				printListWithOrder(list, comb_list);
		
		System.out.println("\n*******************************");
		System.out.println("Combinations Number: " + combs_num);
		System.out.println("Done.");
	}
	
	
	/* Generate combinations function
	* m: How many items/cells would the user select from the population
	* n: The length of the population which is specified to choose m from
	*/
	private static ArrayList<int[]> getCombs(int n, int m) {
		// initialize an ArrayList of list integers, for the combinations
		ArrayList<int[]> combs = new ArrayList<int[]>();
		
		// initialize a list of length m,
		// where each cell value in it equals:
		// (the length of the list) - (cells order) - 1
		int[] init_list = new int[m];
		for (int i = 0; i < m; i++)
			init_list[i] = m - i - 1;
			
		// If m equals n, then there's only one combination
		if (m == n) {	
			combs.add(init_list);
			return combs;
		}
		
		// Loop over untill every modified list be added to combs
		do{
			int[] temp = init_list.clone();
			combs.add(temp);
		}
		while(!modifyCombList(init_list, 0, n));
		
		return combs;
	}
	
	
	/* Generate Combinations Algorithm, generated by modifying the initial list
	* list: the list which will be modified
	* index: the index whose value will be modifated, defualt is 0.(for Recursion)
	* max: the maximum of list[index] value increment. (for Recursion)
	* return true if there is no more modificaitons left on the list
	*/
	private static boolean modifyCombList(int[] list, int index, int max) {
		// Initialize a temporary var with list[index] value after modification
		// to ensure if we can add 1 to list[index] or not
		int modified_index = list[index] + 1;
		
		// If list[index] after increment still smaller than max,
		// then add one to it
		if (modified_index < max) {
			list[index] += 1;
			return false;
		}
		
		// Else, modify the next index with smaller max value by 1, then change
		// list[index] to be the value if the next index after modification + 1
		if (index < list.length - 1) {
			boolean done = modifyCombList(list, index + 1, max - 1);
			list[index] = list[index+1] + 1;
			return done;
		}
		else {
			return true;
		}
	}
	
	// Output list items with a specific order. For example,
	// displaying a-b-c-d with 3-2-1-4 order, outputs: c-b-a-d
	private static void printListWithOrder(String[] list, int[] order) {
	
		String[] output_list = new String[order.length];
		
		for (int i = 0; i < order.length; i++)
			output_list[i] = list[ order[i] ];
		
		System.out.println(Arrays.toString(output_list));
		
	}
}

